"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/users/[userName]";
exports.ids = ["pages/api/users/[userName]"];
exports.modules = {

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("lodash");

/***/ }),

/***/ "neo4j-driver":
/*!*******************************!*\
  !*** external "neo4j-driver" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("neo4j-driver");

/***/ }),

/***/ "(api)/./pages/api/users/[userName].js":
/*!***************************************!*\
  !*** ./pages/api/users/[userName].js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n\nvar neo4j = __webpack_require__(/*! neo4j-driver */ \"neo4j-driver\");\nvar driver = neo4j.driver(\"neo4j+s://6c5afb5b.databases.neo4j.io\", neo4j.auth.basic(\"neo4j\", \"kXQvU8aeNdreD6LeEdSPtA29TlwHz2LgvN2OoM2brl0\"));\nvar session = driver.session();\nfunction handler({ query: { userName  }  }, res) {\n    console.log(' ðŸ¤³ðŸ¤³ðŸ¤³User Name Api 6666 =====: ', userName);\n    var userNodes = [];\n    var userLinks = [];\n    var memberDetail = [];\n    var photoList = [];\n    var children = [];\n    var grandChildren = [];\n    var greatGrandChildren = [];\n    var greatGreatGrandChildren = [];\n    var greatGreatGreatGrandChildren = [];\n    var parents = [];\n    var grandParent = [];\n    var greatGrandParent = [];\n    var greatGreatGrandParent = [];\n    var greatGreatGreatGrandParent = [];\n    var siblings = [];\n    var memoriesList = [];\n    var parentArray = [\n        \"Parent1\",\n        \"Parent2\",\n        \"Parent3\",\n        \"Parent4\",\n        \"Parent5\",\n        \"Parent6\",\n        \"Parent7\",\n        \"Parent8\"\n    ];\n    var writeTarget = \"\";\n    var prevLength = 0;\n    var tempIndex = 0;\n    var firstNode = true;\n    var people = false;\n    var nodeType = \"user\";\n    session.run(`OPTIONAL MATCH pathmem = (b:Member {name: '${userName}'}) - [r:MEMORY_OWN] ->(o:Memories) \n        OPTIONAL MATCH pathphoto = (a:Member {name: '${userName}'}) - [w:PHOTO_OWN] ->(q:PhotoGallery)\n        OPTIONAL MATCH (m:Member {name: '${userName}'}) \n        OPTIONAL MATCH path=(n:Member {name: '${userName}'})-[:PARENT_OF*1..5]-(p) \n        WITH pathmem, pathphoto, q, r, w, m, n, path, range(0,length(path)-1) as index  \n        Return m, n, path, [i in index | CASE WHEN nodes(path)[i] = startNode(RELATIONSHIPS(path)[i]) THEN 'incoming' ELSE 'outgoing' END ] as directions, pathmem, r, pathphoto, w, q`).then(function(result) {\n        console.log('Got it Records');\n        if (result.records.length === 0) {\n            res.status(201).json({\n                message: \"Opps Not Found\"\n            });\n        } else {\n            result.records.forEach(function(record) {\n                // console.log('Memory field 1 & 4: ', record._fields[1])\n                if (record._fields[4]) {\n                    if (record._fields[4] !== null && record._fields[5].type === \"MEMORY_OWN\") {\n                        // console.log('Field 4 Relations: ', record._fields[4])\n                        memoriesList.push({\n                            id: record._fields[4].end.properties.memid,\n                            title: record._fields[4].end.properties.title,\n                            imageURL: record._fields[4].end.properties.imageURL,\n                            excerpt: record._fields[4].end.properties.excerpt\n                        });\n                    }\n                }\n                if (record._fields[6]) {\n                    if (record._fields[6] !== null && record._fields[7].type === \"PHOTO_OWN\") {\n                        // console.log('Field 7 Photo ', record._fields[7], 'end', record._fields[8].properties)\n                        photoList.push({\n                            imageURL: record._fields[8].properties.imageURL,\n                            pdate: record._fields[8].properties.pdate,\n                            id: record._fields[8].properties.id,\n                            title: record._fields[8].properties.title\n                        });\n                    }\n                }\n                if (firstNode) {\n                    firstNode = false;\n                    prevLength = 0;\n                    memberDetail.push({\n                        id: record._fields[1].properties.name,\n                        name: record._fields[1].properties.name,\n                        imageURL: record._fields[1].properties.imageURL\n                    });\n                    userNodes.push({\n                        id: record._fields[1].properties.name,\n                        name: record._fields[1].properties.name,\n                        // __typename: record._fields[1].labels\n                        __typename: nodeType\n                    });\n                    parentArray[0] = record._fields[1].properties.name;\n                }\n                if (record._fields[2]) {\n                    tempIndex = record._fields[2].length - 1;\n                    if (prevLength < record._fields[2].length) {\n                        writeTarget = record._fields[2].end.properties.name;\n                        prevLength = record._fields[2].length;\n                    }\n                    if (prevLength === record._fields[2].length) {\n                        // console.log('Source : ', parentArray[tempIndex])\n                        // console.log('Target : ', writeTarget)\n                        // console.log(\"node\", writeTarget, record._fields[2].length )\n                        if (record._fields[2].length < 3) {\n                            userNodes.push({\n                                id: writeTarget,\n                                name: writeTarget,\n                                // __typename: record._fields[2].labels\n                                __typename: nodeType\n                            });\n                            userLinks.push({\n                                source: parentArray[tempIndex],\n                                target: writeTarget\n                            });\n                        }\n                        prevLength = 0;\n                        parentArray[record._fields[2].length] = writeTarget;\n                    }\n                    if (prevLength > record._fields[2].length) {\n                        console.log('How did this happen');\n                    }\n                    people = false;\n                    if (record._fields[3].length === 1) {\n                        people = true;\n                    } else {\n                        if (record._fields[3][0] === record._fields[3][1]) {\n                            people = true;\n                        }\n                    }\n                    if (people) {\n                        if (record._fields[2].length === 1) {\n                            if (record._fields[3][0] === \"incoming\") {\n                                children.push({\n                                    name: record._fields[2].end.properties.name\n                                });\n                                nodeType = \"children\";\n                            }\n                            if (record._fields[3][0] === \"outgoing\") {\n                                // console.log('Parents : ', record._fields[2].end)\n                                parents.push({\n                                    name: record._fields[2].end.properties.name,\n                                    imageURL: record._fields[2].end.properties.imageURL\n                                });\n                                nodeType = \"parent\";\n                            }\n                        }\n                        if (record._fields[2].length === 2) {\n                            if (record._fields[3][0] === \"incoming\") {\n                                grandChildren.push({\n                                    name: record._fields[2].end.properties.name,\n                                    imageURL: record._fields[2].end.properties.imageURL\n                                });\n                                nodeType = \"grandChildren\";\n                            }\n                            if (record._fields[3][0] === \"outgoing\") {\n                                grandParent.push({\n                                    name: record._fields[2].end.properties.name,\n                                    imageURL: record._fields[2].end.properties.imageURL\n                                });\n                                nodeType = \"grandParent\";\n                            }\n                        }\n                        if (record._fields[2].length === 3) {\n                            // console.log('Field length = 3 ', record._fields[1], record._fields[2].end.properties.name, record._fields[3])\n                            if (record._fields[3][0] === \"incoming\" && record._fields[3][1] === \"incoming\" && record._fields[3][2] === \"incoming\") {\n                                greatGrandChildren.push({\n                                    name: record._fields[2].end.properties.name\n                                });\n                                nodeType = \"greatGrandChildren\";\n                            }\n                            if (record._fields[3][0] === \"outgoing\" && record._fields[3][1] === \"outgoing\" && record._fields[3][2] === \"outgoing\") {\n                                greatGrandParent.push({\n                                    name: record._fields[2].end.properties.name\n                                });\n                                nodeType = \"greatGrandParent\";\n                            }\n                        }\n                        if (record._fields[2].length === 4) {\n                            // console.log('Field length = 4 ', record._fields[1], record._fields[2].end.properties.name, record._fields[3])\n                            if (record._fields[3][0] === \"incoming\" && record._fields[3][1] === \"incoming\" && record._fields[3][2] === \"incoming\" && record._fields[3][3] === \"incoming\") {\n                                // console.log('GGC')\n                                greatGreatGrandChildren.push({\n                                    name: record._fields[2].end.properties.name\n                                });\n                                nodeType = \"greatGreatGrandChildren\";\n                            }\n                            if (record._fields[3][0] === \"outgoing\" && record._fields[3][1] === \"outgoing\" && record._fields[3][2] === \"outgoing\" && record._fields[3][3] === \"outgoing\") {\n                                // console.log('GGP Push')\n                                greatGreatGrandParent.push({\n                                    name: record._fields[2].end.properties.name\n                                });\n                                nodeType = \"greatGreatGrandParent\";\n                            }\n                        }\n                        if (record._fields[2].length === 5) {\n                            // console.log('Field length = 4 ', record._fields[1], record._fields[2].end.properties.name, record._fields[3])\n                            if (record._fields[3][0] === \"incoming\" && record._fields[3][1] === \"incoming\" && record._fields[3][2] === \"incoming\" && record._fields[3][3] === \"incoming\" && record._fields[3][4] === \"incoming\") {\n                                // console.log('GGC')\n                                greatGreatGreatGrandChildren.push({\n                                    name: record._fields[2].end.properties.name\n                                });\n                                nodeType = \"greatGreatGreatGrandChildren\";\n                            }\n                            if (record._fields[3][0] === \"outgoing\" && record._fields[3][1] === \"outgoing\" && record._fields[3][2] === \"outgoing\" && record._fields[3][3] === \"outgoing\" && record._fields[3][4] === \"outgoing\") {\n                                // console.log('GGP Push')\n                                greatGreatGreatGrandParent.push({\n                                    name: record._fields[2].end.properties.name\n                                });\n                                nodeType = \"greatGreatGreatGrandParent\";\n                            }\n                        }\n                    }\n                    if (record._fields[3][0] === \"outgoing\" && record._fields[3][1] === \"incoming\" && record._fields[2].length === 2) {\n                        // console.log('Sibling, ', record._fields[3])\n                        // console.log('Sibling, ', record._fields[2])\n                        siblings.push({\n                            name: record._fields[2].end.properties.name\n                        });\n                        nodeType = \"siblings\";\n                    }\n                    if (record._fields[2].length === 2) {}\n                }\n            });\n        }\n        const data = {\n            nodes: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(userNodes, \"id\"),\n            links: userLinks\n        };\n        // console.log('Data : ', data)\n        const member = {\n            member: memberDetail,\n            children: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(children, \"name\"),\n            grandChildren: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(grandChildren, \"name\"),\n            parents: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(parents, \"name\"),\n            grandParent: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(grandParent, \"name\"),\n            greatGrandParent: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(greatGrandParent, \"name\"),\n            greatGrandChildren: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(greatGrandChildren, \"name\"),\n            greatGreatGrandParent: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(greatGreatGrandParent, \"name\"),\n            greatGreatGrandChildren: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(greatGreatGrandChildren, \"name\"),\n            greatGreatGreatGrandParent: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(greatGreatGreatGrandParent, \"name\"),\n            greatGreatGreatGrandChildren: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(greatGreatGreatGrandChildren, \"name\"),\n            siblings: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(siblings, \"name\")\n        };\n        const memories = {\n            memories: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(memoriesList, \"title\")\n        };\n        const photoGallery = {\n            photoList: lodash__WEBPACK_IMPORTED_MODULE_0___default().uniqBy(photoList, \"id\")\n        };\n        // console.log('Children ', children, grandChildren, 'GrandChildren : ')\n        // console.log('Parent : ', parents, 'Grandparent ', grandParent)\n        console.log('Siblings ', siblings);\n        // console.log('Memories : ', memories)\n        console.log('En Fin With Individual User: ðŸ™ŒðŸ™ŒðŸ™ŒðŸ™ŒðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ˜ŽðŸ˜ŽðŸ˜ŽðŸ˜ŽðŸ˜Ž ');\n        if (firstNode) {\n            res.status(201).json({\n                message: \"Opps Not Found\"\n            });\n        } else {\n            res.json({\n                data: data,\n                member: member,\n                memories: memories,\n                photoGallery: photoGallery\n            });\n        }\n    }).catch(function(error) {\n        console.log(\"Hey airaaa\", error);\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/users/[userName].js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/users/[userName].js"));
module.exports = __webpack_exports__;

})();